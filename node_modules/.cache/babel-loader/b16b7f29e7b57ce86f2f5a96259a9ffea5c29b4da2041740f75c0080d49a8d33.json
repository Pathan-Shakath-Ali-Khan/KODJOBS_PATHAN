{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = '7b1fdd81-34a6-466f-a577-837c39e10048';\nconst APP_ID = '2401e4d6'; // Add your Adzuna APP_ID here\nconst BASE_URL = 'https://api.adzuna.com/v1/api/jobs/gb/search/1';\nexport const fetchJobs = async ({\n  searchTerm = '',\n  location = '',\n  page = 1,\n  resultsPerPage = 50\n} = {}) => {\n  try {\n    const response = await axios.get(BASE_URL, {\n      params: {\n        app_id: APP_ID,\n        app_key: API_KEY,\n        results_per_page: resultsPerPage,\n        what: searchTerm || 'software developer',\n        where: location,\n        page: page,\n        sort_by: 'date',\n        content_type: 'application/json'\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.data || !response.data.results) {\n      throw new Error('Invalid response format from API');\n    }\n    return {\n      jobs: response.data.results,\n      totalResults: response.data.count,\n      totalPages: Math.ceil(response.data.count / resultsPerPage)\n    };\n  } catch (error) {\n    console.error('Error fetching jobs:', error);\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      throw new Error(`API Error: ${error.response.status} - ${error.response.data.message || 'Unknown error'}`);\n    } else if (error.request) {\n      // The request was made but no response was received\n      throw new Error('No response received from server');\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      throw new Error('Error setting up the request');\n    }\n  }\n};","map":{"version":3,"names":["axios","API_KEY","APP_ID","BASE_URL","fetchJobs","searchTerm","location","page","resultsPerPage","response","get","params","app_id","app_key","results_per_page","what","where","sort_by","content_type","headers","data","results","Error","jobs","totalResults","count","totalPages","Math","ceil","error","console","status","message","request"],"sources":["C:/Users/shouk/OneDrive/Desktop/job portal/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = '7b1fdd81-34a6-466f-a577-837c39e10048';\r\nconst APP_ID = '2401e4d6'; // Add your Adzuna APP_ID here\r\nconst BASE_URL = 'https://api.adzuna.com/v1/api/jobs/gb/search/1';\r\n\r\nexport const fetchJobs = async ({\r\n  searchTerm = '',\r\n  location = '',\r\n  page = 1,\r\n  resultsPerPage = 50\r\n} = {}) => {\r\n  try {\r\n    const response = await axios.get(BASE_URL, {\r\n      params: {\r\n        app_id: APP_ID,\r\n        app_key: API_KEY,\r\n        results_per_page: resultsPerPage,\r\n        what: searchTerm || 'software developer',\r\n        where: location,\r\n        page: page,\r\n        sort_by: 'date',\r\n        content_type: 'application/json'\r\n      },\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (!response.data || !response.data.results) {\r\n      throw new Error('Invalid response format from API');\r\n    }\r\n\r\n    return {\r\n      jobs: response.data.results,\r\n      totalResults: response.data.count,\r\n      totalPages: Math.ceil(response.data.count / resultsPerPage)\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching jobs:', error);\r\n    if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      // that falls out of the range of 2xx\r\n      throw new Error(`API Error: ${error.response.status} - ${error.response.data.message || 'Unknown error'}`);\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      throw new Error('No response received from server');\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      throw new Error('Error setting up the request');\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,sCAAsC;AACtD,MAAMC,MAAM,GAAG,UAAU,CAAC,CAAC;AAC3B,MAAMC,QAAQ,GAAG,gDAAgD;AAEjE,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAO;EAC9BC,UAAU,GAAG,EAAE;EACfC,QAAQ,GAAG,EAAE;EACbC,IAAI,GAAG,CAAC;EACRC,cAAc,GAAG;AACnB,CAAC,GAAG,CAAC,CAAC,KAAK;EACT,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAACP,QAAQ,EAAE;MACzCQ,MAAM,EAAE;QACNC,MAAM,EAAEV,MAAM;QACdW,OAAO,EAAEZ,OAAO;QAChBa,gBAAgB,EAAEN,cAAc;QAChCO,IAAI,EAAEV,UAAU,IAAI,oBAAoB;QACxCW,KAAK,EAAEV,QAAQ;QACfC,IAAI,EAAEA,IAAI;QACVU,OAAO,EAAE,MAAM;QACfC,YAAY,EAAE;MAChB,CAAC;MACDC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAI,CAACV,QAAQ,CAACW,IAAI,IAAI,CAACX,QAAQ,CAACW,IAAI,CAACC,OAAO,EAAE;MAC5C,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IACrD;IAEA,OAAO;MACLC,IAAI,EAAEd,QAAQ,CAACW,IAAI,CAACC,OAAO;MAC3BG,YAAY,EAAEf,QAAQ,CAACW,IAAI,CAACK,KAAK;MACjCC,UAAU,EAAEC,IAAI,CAACC,IAAI,CAACnB,QAAQ,CAACW,IAAI,CAACK,KAAK,GAAGjB,cAAc;IAC5D,CAAC;EAEH,CAAC,CAAC,OAAOqB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,IAAIA,KAAK,CAACpB,QAAQ,EAAE;MAClB;MACA;MACA,MAAM,IAAIa,KAAK,CAAC,cAAcO,KAAK,CAACpB,QAAQ,CAACsB,MAAM,MAAMF,KAAK,CAACpB,QAAQ,CAACW,IAAI,CAACY,OAAO,IAAI,eAAe,EAAE,CAAC;IAC5G,CAAC,MAAM,IAAIH,KAAK,CAACI,OAAO,EAAE;MACxB;MACA,MAAM,IAAIX,KAAK,CAAC,kCAAkC,CAAC;IACrD,CAAC,MAAM;MACL;MACA,MAAM,IAAIA,KAAK,CAAC,8BAA8B,CAAC;IACjD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}